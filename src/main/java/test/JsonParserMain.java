package test;
import java.io.File;
import java.io.IOException;
import java.util.Stack;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class JsonParserMain {

    private Context context = new Context();

    public static void main(String[] args) {
        new JsonParserMain().run();
    }

    private void run() {
        JsonFactory factory = new JsonFactory();
        try {
            JsonParser parser = factory.createParser(new File("test.json"));
            JsonToken token = parser.nextToken();
            while (token != null) {
                switch (token) {
                case START_OBJECT:
                    token = parseObject(parser);
                    break;
                case START_ARRAY:
                    token = parseArray(parser);
                    break;
                default:
                    token = parser.nextToken();
                    break;
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private JsonToken parseArray(JsonParser parser) throws IOException {
        JsonToken token = null;
        int index = 0;
        while ((token = parser.nextToken()) != null) {
            context.append("[" + index + "]");
            switch (token) {
            case START_OBJECT:
                token = parseObject(parser);
                context.remove("\\[" + index + "\\]");
                break;
            case START_ARRAY:
                token = parseArray(parser);
                context.remove("\\[" + index + "\\]");
                break;
            case VALUE_STRING:
            case VALUE_NUMBER_INT:
            case VALUE_NUMBER_FLOAT:
            case VALUE_NULL:
            case VALUE_TRUE:
            case VALUE_FALSE:
                System.out.println(context.getCurrentName() + "\t" + token + "\t" + parser.getText());
                context.remove("\\[" + index + "\\]");
                break;
            case END_ARRAY:
                return token;
            default:
                return token;
            }
            index++;
        }
        return token;

    }

    private JsonToken parseObject(JsonParser parser) throws IOException {
        JsonToken token = null;

        while ((token = parser.nextToken()) != null) {
            if (JsonToken.FIELD_NAME.equals(token)) {
                context.push(parser.getCurrentName());
            } else {
                return token;
            }
            token = parser.nextToken();
            switch (token) {
            case START_OBJECT:
                token = parseObject(parser);
                context.pop();
                break;
            case START_ARRAY:
                token = parseArray(parser);
                context.pop();
                break;
            case VALUE_STRING:
            case VALUE_NUMBER_INT:
            case VALUE_NUMBER_FLOAT:
            case VALUE_NULL:
            case VALUE_TRUE:
            case VALUE_FALSE:
                System.out.println(context.getCurrentName() + "\t" + token + "\t" + parser.getText());
                context.pop();
                break;
            case END_OBJECT:
                context.pop();
                break;
            default:
                return token;
            }

        }
        return token;
    }

    private class Context {
        private Stack<String> stack = new Stack<>();

        public String push(String name) {
            return stack.push(name);
        }

        public String append(String append) {
            return stack.set(stack.size() - 1, stack.peek() + append);
        }

        public String remove(String remove) {
            return stack.set(stack.size() - 1, stack.peek().replaceAll(remove, ""));
        }

        public String pop() {
            return stack.pop();
        }

        public String getCurrentName() {
            return String.join(".", stack);
        }

        @Override
        public String toString() {
            return getCurrentName();
        }
    }

}
